<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="application/xml" href="xsldoc/xsldoc.xsl"?><!-- xslbook-do.xsl 0.2 Copyright (C) 2022 xslet project MIT License --><!--** xslbook-do.xsl ver0.2 - API Document
**
 xslbook-do is a XSLT library which provides XSLT match templates to operate XML data for xslbook. This library enables to let users to operate XML data without exposing XSLT and XPath specifications to them.

 This library implements the match templates to get an object/objects or to loop child nodes. These XSLT templates basically wrap the named templates of xsldo, and the path specifications and so on follow xsldo's specification.

 This program is written in XSLT 1.0.

** Copyright (C) 2022 xslet project
** MIT License
--><xsl:stylesheet xmlns:book="https://github.com/xslet/2020/xslbook" xmlns:do="https://github.com/xslet/2020/xsldo" xmlns:ut="https://github.com/xslet/2020/xslutil" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"><!--** A set of utilities for XSLT programs on Web browsers. --><xsl:import href="xslutil.xsl"/><!--** XML data operation libraries for XSLT programs on Web browsers.  --><xsl:import href="xsldo.xsl"/><!--**
  Gets count of nodes at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="count"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:count_nodes_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Loop child nodes for each node at the specified path with @each attribute.

  This loop can sort by the specified terminal node, in the specified direction, as the specified type.
  @sort-by attribute sort result node orders by child element or attribute of which name is specified by this attribute.
  @sort-dir attribute sort result node orders in direction specified by this attribute. This attribute can take either "asc" or "desc", and the default is "asc".
  @sort-type attribute specifies the sorting type by which each node evaluate. This attribute can take either "text" or "number", and the default is "text".

  @reverse attribute sort result node orders in reverse when it's value is 'true'.
  @index attribute specifies the index ID for this loop. If this ID is specified, the current index of this loop can be obrained by descendant <index> element, Unless, only child <index> can obtain this current index.

  If @data-src attribute is present, this template loops for nodes in the external file by this attribute.
 --><xsl:template match="for[boolean(@each) or boolean(attr/@name='each')]"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** Elements which are allowed to be applied. --><xsl:param name="allow"/><!--** A flag if text node is allowed. --><xsl:param name="allow_text_node" select="$ut:true"/><!--** Elements which are denied to be applied. --><xsl:param name="deny"/><!--** Any attribute 0. --><xsl:param name="arg0"/><!--** Any attribute 1. --><xsl:param name="arg1"/><!--** Any attribute 2. --><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">each</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_index_id"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">index</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_reverse"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">reverse</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sort_name"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">sort-by</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sort_dir"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">sort-dir</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sort_type"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">sort-type</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:for_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index_id" select="$_index_id"/><xsl:with-param name="index_set" select="$data_indexes"/><xsl:with-param name="reverse" select="$_reverse"/><xsl:with-param name="sort_name" select="$_sort_name"/><xsl:with-param name="sort_dir" select="$_sort_dir"/><xsl:with-param name="sort_type" select="$_sort_type"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="deny">|attr|</xsl:with-param><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:call-template></xsl:template><!--**
  Gets a preceding comment of first node at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="preceding-comment"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">preceding-comment</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Gets a following comment of first node at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="following-comment"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">following-comment</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Get an attribute value or <attr> element value of which @name attrbute is same with parameter `name`.
  The attribute value takes priority over the <attr> element value.
  If both the attribute and <attr> element are not present, then this returns an empty string.
 --><xsl:template name="book:get_attr"><!--** The attribute name. --><xsl:param name="name"/><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a current node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** An argument which is passed to xsldo modules. --><xsl:param name="arg0"/><!--** An argument which is passed to xsldo modules. --><xsl:param name="arg1"/><!--** An argument which is passed to xsldo modules. --><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="@*[name()=$name]"><xsl:value-of select="@*[name()=$name]"/></xsl:when><xsl:otherwise><xsl:for-each select="attr[@name=$name]"><xsl:choose><xsl:when test="boolean(@of)"><xsl:call-template name="book:_get_object"><xsl:with-param name="path" select="@of"/><xsl:with-param name="what" select="@what"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index" select="$data_index"/><xsl:with-param name="index_set" select="$data_indexes"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:apply-templates><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><!--
  Loop child nodes for times specified by @times attribute.

  @index attribute specifies the index ID for this loop. If this ID is specified, the current index of this loop can be obtained by descendant <index> element, Unless, only child <index> can obtain this current index.

  If @data-src attribute is present, this template loops for nodes in the external file by this attribute.
 --><xsl:template match="for[boolean(@times) or boolean(attr/@name='times')]"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** Elements which are allowed to be applied. --><xsl:param name="allow"/><!--** A flag if text node is allowed. --><xsl:param name="allow_text_node" select="$ut:true"/><!--** Elements which are denied to be applied. --><xsl:param name="deny"/><!--** Any attribute 0. --><xsl:param name="arg0"/><!--** Any attribute 1. --><xsl:param name="arg1"/><!--** Any attribute 2. --><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_times"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">times</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_index_id"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">index</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:for_times"><xsl:with-param name="times" select="$_times"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index_id" select="$_index_id"/><xsl:with-param name="index_set" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="deny">|attr|</xsl:with-param><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:call-template></xsl:template><!--**
  Tests a condition and applies child elements if the condition is satisfied.
  A condition is the comparision of the object of the node at the path specified by @of and the value of the operator attribute: @eq (equal), @ne (not equal), @lt (less than), @le (less than or equal), @gt (greater than), @ge (greather than or equal). These operators can be used at the same time.

  If child <then> and <else> elements are present, this template applys child <then> elements if the test is passed and applys the <else> elements if not.

  The object of a node which is used on testing can specified @what attribute. This attribute can take these options: "value"(default), "content", "number", "name", "count", "sum", "index".

  If @data-src attribute is present, this template uses a value of a node in the external file specified by this attribute for testing the condition, but not used for applying child elements.
 --><xsl:template match="if"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** Elements which are allowed to be applied. --><xsl:param name="allow"/><!--** A flag if text node is allowed. --><xsl:param name="allow_text_node" select="$ut:true"/><!--** Any argument 0. --><xsl:param name="arg0"/><!--** Any argument 1. --><xsl:param name="arg1"/><!--** Any argument 2. --><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_what"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">what</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:call-template name="book:_get_object"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what" select="$_what"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index" select="$data_index"/><xsl:with-param name="index_set" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_is_not_matched"><xsl:call-template name="book:_is_not_matched"><xsl:with-param name="object" select="$_result"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="boolean(then|else)"><xsl:choose><xsl:when test="string-length($_is_not_matched) = 0"><xsl:apply-templates select="then"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="deny" select="'|attr|else|'"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:when><xsl:otherwise><xsl:apply-templates select="else"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="deny" select="'|attr|then|'"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($_is_not_matched) = 0"><xsl:apply-templates select="text()|*[name()!='attr']"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:when></xsl:choose></xsl:template><xsl:template name="book:_is_not_matched"><xsl:param name="object"/><xsl:param name="data_url"/><xsl:param name="data_gid"/><xsl:param name="data_index"/><xsl:param name="data_indexes"/><xsl:if test="boolean(@eq)"><xsl:if test="$object != @eq">1</xsl:if></xsl:if><xsl:if test="boolean(@ne)"><xsl:if test="$object = @ne">1</xsl:if></xsl:if><xsl:if test="boolean(@le)"><xsl:if test="$object &gt; @le">1</xsl:if></xsl:if><xsl:if test="boolean(@lt)"><xsl:if test="$object &gt;= @lt">1</xsl:if></xsl:if><xsl:if test="boolean(@ge)"><xsl:if test="$object &lt; @ge">1</xsl:if></xsl:if><xsl:if test="boolean(@gt)"><xsl:if test="$object &lt;= @gt">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='eq'])"><xsl:variable name="_eq"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">eq</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object != $_eq">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='ne'])"><xsl:variable name="_ne"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">ne</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object = $_ne">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='le'])"><xsl:variable name="_le"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">le</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object &gt; $_le">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='lt'])"><xsl:variable name="_lt"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">lt</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object &gt;= $_lt">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='ge'])"><xsl:variable name="_ge"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">ge</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object &lt; $_ge">1</xsl:if></xsl:if><xsl:if test="boolean(attr[@name='gt'])"><xsl:variable name="_gt"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">gt</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:if test="$object &lt;= $_gt">1</xsl:if></xsl:if></xsl:template><!--**
  Get a generated ID by `generate-id()` of a base node in an data source file.
  If a current node has @data-src attribute, this returns an empty string to reset the generated ID.
 --><xsl:template name="book:get_data_gid"><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><xsl:if test="not(boolean(@data-src))"><xsl:value-of select="$data_gid"/></xsl:if></xsl:template><!--**
  Gets sum of number values of nodes at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="sum"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sum"><xsl:call-template name="_calc_sum"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/></xsl:call-template></xsl:variable><xsl:value-of select="$_prefix"/><xsl:value-of select="$_sum"/><xsl:value-of select="$_suffix"/></xsl:template><xsl:template name="_calc_sum"><xsl:param name="path"/><xsl:param name="data_url"/><xsl:param name="data_gid"/><xsl:variable name="_numbers"><xsl:call-template name="do:get_objects_by_path"><xsl:with-param name="path" select="$path"/><xsl:with-param name="what">number</xsl:with-param><xsl:with-param name="prefix"/><xsl:with-param name="suffix">|</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:call-template name="_calc_sum_rcr"><xsl:with-param name="sum">0</xsl:with-param><xsl:with-param name="nums" select="$_numbers"/></xsl:call-template></xsl:template><xsl:template name="_calc_sum_rcr"><xsl:param name="sum"/><xsl:param name="nums"/><xsl:variable name="_num" select="substring-before($nums, '|')"/><xsl:variable name="_nums" select="substring-after($nums, '|')"/><xsl:choose><xsl:when test="string-length($nums) = 0"><xsl:value-of select="$sum"/></xsl:when><xsl:when test="$_num = 'NaN'"><xsl:call-template name="_calc_sum_rcr"><xsl:with-param name="sum" select="$sum"/><xsl:with-param name="nums" select="$_nums"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="_calc_sum_rcr"><xsl:with-param name="sum" select="$sum + $_num"/><xsl:with-param name="nums" select="$_nums"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><!--**
  Gets a name of first node at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a name of a node in the external file specified by this attribute.
 --><xsl:template match="name"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">name</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><xsl:template name="book:_get_object"><xsl:param name="data_url"/><xsl:param name="data_gid"/><xsl:param name="index"/><xsl:param name="index_set"/><xsl:param name="path"/><xsl:param name="what"/><xsl:choose><xsl:when test="string-length($what) = 0"><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$path"/><xsl:with-param name="what">text</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:when><xsl:when test="$what = 'index'"><xsl:call-template name="book:_get_index"><xsl:with-param name="index" select="$index"/><xsl:with-param name="index_set" select="$index_set"/><xsl:with-param name="index_id" select="$path"/></xsl:call-template></xsl:when><xsl:when test="$what = 'count'"><xsl:call-template name="do:count_nodes_by_path"><xsl:with-param name="path" select="$path"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:when><xsl:when test="$what = 'sum'"><xsl:call-template name="_calc_sum"><xsl:with-param name="path" select="$path"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:when><xsl:when test="$what = 'value'"><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$path"/><xsl:with-param name="what">text</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:when><xsl:when test="$what = 'text'"/><xsl:otherwise><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$path"/><xsl:with-param name="what" select="$what"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><!--**
  Gets values of nodes at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for each value can be specified with @prefix and @suffix attribute.
  The separator for each value can be specified with @separator attribute.
  If @data-src attribute is present, this template gets values of nodes in the external file specified by this attribute.
 --><xsl:template match="values"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sep"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">separator</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:value-of select="$_sep"/><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:call-template name="do:get_objects_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">text</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:variable><xsl:value-of select="substring($_result, string-length($_sep) + 1)"/></xsl:template><!--**
  Get index of an above loop.
  If @of attribute is present, get the index of the parent or ancestor loop with @id attribute which is equals to this @of attribute.
  Unless, get the index of the parent loop.
 --><xsl:template match="index"><!--** Index of parent loop element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><xsl:variable name="_index_id"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_index"><xsl:call-template name="book:_get_index"><xsl:with-param name="index" select="$data_index"/><xsl:with-param name="index_set" select="$data_indexes"/><xsl:with-param name="index_id" select="$_index_id"/></xsl:call-template></xsl:variable><xsl:if test="string-length($_index) != 0"><xsl:value-of select="$_prefix"/><xsl:value-of select="$_index"/><xsl:value-of select="$_suffix"/></xsl:if></xsl:template><xsl:template name="book:_get_index"><xsl:param name="index"/><xsl:param name="index_set"/><xsl:param name="index_id"/><xsl:choose><xsl:when test="string-length($index_id) = 0"><xsl:value-of select="$index"/></xsl:when><xsl:otherwise><xsl:value-of select="substring-before(substring-after($index_set, concat($do:_object_sep, $index_id, $do:_cond_op_sep)), $do:_object_sep)"/></xsl:otherwise></xsl:choose></xsl:template><!--**
  Gets a number value of an element at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a number value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a number value of a node in the external file specified by this attribute.
 --><xsl:template match="number"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">number</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Gets content texts of elements at specified path.
  A content text includes values of child and descendant elements.
  The path is specified with @of attribute.
  The prefix and suffix of each content can be specified with @prefix and @suffix attributes.
  The separator for each content can be specified with @separator attribute.
  If @data-src attribute is present, this template gets values of nodes in the expternal file specified by this attribute.
 --><xsl:template match="contents"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sep"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">separator</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:value-of select="$_sep"/><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:call-template name="do:get_objects_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">content</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:variable><xsl:value-of select="substring($_result, string-length($_sep) + 1)"/></xsl:template><!--**
  Tests multiple conditions and applies a child element of a child <when> element of which the condition is satisfied or a child <otherwise> element.
  If a <when> element has @of or @what attribute, its test compares the object of the node specified by these attributes with the value of the operator attribute.
  If a <when> element has neither @of and @what attributes, its test compares the object of the node at the path specified by the choose's @of with the value of the operator attribute of the <when> element.
  If there is no <when> element which satisfies its condition, a <otherwise> elements are applied.
  The operator attribute can take these options: @eq (equal), @ne (not equal), @lt (less than), @le (less than or equal), @gt (greater than), @ge (greater than or equal). These operators can be used at the same time.

    The object of a node which is used on testing can specified @what attribute. This attribute can take these options: "value"(default), "content", "number", "name", "count", "sum", "index".

  If @data-src attribute is present, this template uses a value of a node in the external file specified by this attribute for testing the condition, but not used for applying child elements.
 --><xsl:template match="choose"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><!--** Elements which are allowed to be applied. --><xsl:param name="allow"/><!--** A flag if text node is allowed. --><xsl:param name="allow_text_node" select="$ut:true"/><!--** Any argument 0. --><xsl:param name="arg0"/><!--** Any argument 1. --><xsl:param name="arg1"/><!--** Any argument 2. --><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:if test="not(boolean(when/@of) or boolean(when/attr[@name='of']))"><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_what"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">what</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="book:_get_object"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what" select="$_what"/><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index" select="$data_index"/><xsl:with-param name="index_set" select="$data_indexes"/></xsl:call-template></xsl:if></xsl:variable><xsl:variable name="_when_count"><xsl:value-of select="count(when)"/></xsl:variable><xsl:for-each select="when[1]"><xsl:call-template name="book:_choose_when"><xsl:with-param name="result" select="$_result"/><xsl:with-param name="when_index" select="1"/><xsl:with-param name="when_count" select="$_when_count"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:call-template></xsl:for-each></xsl:template><xsl:template name="book:_choose_when"><xsl:param name="result"/><xsl:param name="when_index"/><xsl:param name="when_count"/><xsl:param name="data_url"/><xsl:param name="data_gid"/><xsl:param name="data_index"/><xsl:param name="data_indexes"/><xsl:param name="allow"/><xsl:param name="allow_text_node"/><xsl:param name="arg0"/><xsl:param name="arg1"/><xsl:param name="arg2"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:choose><xsl:when test="boolean(@of) or boolean(attr[@name='of']) or boolean(@what) or boolean(attr[@name='what'])"><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_what"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">what</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="book:_get_object"><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="index_set" select="$data_indexes"/><xsl:with-param name="index" select="$data_index"/><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what" select="$_what"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$result"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="_is_not_matched"><xsl:call-template name="book:_is_not_matched"><xsl:with-param name="object" select="$_result"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="string-length($_is_not_matched) = 0"><xsl:apply-templates select="text()|*[name()!='attr']"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:when><xsl:when test="$when_index &lt; $when_count"><xsl:for-each select="../when[position() = $when_index + 1]"><xsl:call-template name="book:_choose_when"><xsl:with-param name="result" select="$result"/><xsl:with-param name="when_index" select="$when_index + 1"/><xsl:with-param name="when_count" select="$when_count"/><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:call-template></xsl:for-each></xsl:when><xsl:otherwise><xsl:for-each select="../otherwise[1]"><xsl:apply-templates select="text()|*[name()!='attr']"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/><xsl:with-param name="allow" select="$allow"/><xsl:with-param name="allow_text_node" select="$allow_text_node"/><xsl:with-param name="arg0" select="$arg0"/><xsl:with-param name="arg1" select="$arg1"/><xsl:with-param name="arg2" select="$arg2"/></xsl:apply-templates></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><!--**
  Get an URL of a data source by @data-src attribute or a parameter from an ancestor element.
 --><xsl:template name="book:get_data_url"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:choose><xsl:when test="boolean(@data-src)"><xsl:value-of select="@data-src"/></xsl:when><xsl:when test="boolean(attr[@name='data-src'])"><xsl:apply-templates select="attr[@name='data-src']"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:apply-templates></xsl:when><xsl:otherwise><xsl:value-of select="$data_url"/></xsl:otherwise></xsl:choose></xsl:template><!--**
  Gets a content text of an element at specified path.
  A content text includes values of child and descendant elements.
  The path is specified with @of attribute.
  The prefix and suffix for a content can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="content"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">content</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Gets number values of nodes at the specified path.
  The path is specified with @of attriutes.
  The prefix and suffix for each number value can be specified with @prefix and @suffix attribute.
  The separator for each number value can be specified with @separator attribute.
  If @data-src attribute is present, this template gets number values of nodes in the external file specified by this attribute.
 --><xsl:template match="numbers"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sep"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">separator</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:value-of select="$_sep"/><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:call-template name="do:get_objects_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">number</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:variable><xsl:value-of select="substring($_result, string-length($_sep) + 1)"/></xsl:template><!--**
  Gets a value of first node at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for a value can be specified with @prefix and @suffix attributes.
  If @data-src attribute is present, this template gets a value of a node in the external file specified by this attribute.
 --><xsl:template match="value"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:call-template name="do:first_object_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">text</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:template><!--**
  Gets names of nodes at the specified path.
  The path is specified with @of attribute.
  The prefix and suffix for each value can be specified with @prefix and @suffix attribute.
  The separator for each value can be specified with @separator attribute.
  If @data-src attribute is present, this template gets values of nodes in the external file specified by this attribute.
 --><xsl:template match="names"><!--** An URL of external data file from an ancestor element. --><xsl:param name="data_url"/><!--** A generated ID of a base node in a data source. --><xsl:param name="data_gid"/><!--** Index of parent <for> element. --><xsl:param name="data_index"/><!--** Index set of ancestor <for> elements. --><xsl:param name="data_indexes"/><xsl:variable name="_data_url"><xsl:call-template name="book:get_data_url"><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_data_gid"><xsl:call-template name="book:get_data_gid"><xsl:with-param name="data_gid" select="$data_gid"/></xsl:call-template></xsl:variable><xsl:variable name="_path"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">of</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_sep"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">separator</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_prefix"><xsl:value-of select="$_sep"/><xsl:call-template name="book:get_attr"><xsl:with-param name="name">prefix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_suffix"><xsl:call-template name="book:get_attr"><xsl:with-param name="name">suffix</xsl:with-param><xsl:with-param name="data_url" select="$data_url"/><xsl:with-param name="data_gid" select="$data_gid"/><xsl:with-param name="data_index" select="$data_index"/><xsl:with-param name="data_indexes" select="$data_indexes"/></xsl:call-template></xsl:variable><xsl:variable name="_result"><xsl:call-template name="do:get_objects_by_path"><xsl:with-param name="path" select="$_path"/><xsl:with-param name="what">name</xsl:with-param><xsl:with-param name="data_url" select="$_data_url"/><xsl:with-param name="data_gid" select="$_data_gid"/><xsl:with-param name="prefix" select="$_prefix"/><xsl:with-param name="suffix" select="$_suffix"/></xsl:call-template></xsl:variable><xsl:value-of select="substring($_result, string-length($_sep) + 1)"/></xsl:template></xsl:stylesheet>